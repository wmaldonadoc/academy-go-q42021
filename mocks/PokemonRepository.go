// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/wmaldonadoc/academy-go-q42021/domain/model"
	pokerrors "github.com/wmaldonadoc/academy-go-q42021/pokerrors"
)

// PokemonRepository is an autogenerated mock type for the PokemonRepository type
type PokemonRepository struct {
	mock.Mock
}

// CreateOne provides a mock function with given fields: pokemon
func (_m *PokemonRepository) CreateOne(pokemon *model.Pokemon) (*model.Pokemon, *pokerrors.RepositoryError) {
	ret := _m.Called(pokemon)

	var r0 *model.Pokemon
	if rf, ok := ret.Get(0).(func(*model.Pokemon) *model.Pokemon); ok {
		r0 = rf(pokemon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pokemon)
		}
	}

	var r1 *pokerrors.RepositoryError
	if rf, ok := ret.Get(1).(func(*model.Pokemon) *pokerrors.RepositoryError); ok {
		r1 = rf(pokemon)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pokerrors.RepositoryError)
		}
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *PokemonRepository) FindByID(id int) (*model.Pokemon, *pokerrors.RepositoryError) {
	ret := _m.Called(id)

	var r0 *model.Pokemon
	if rf, ok := ret.Get(0).(func(int) *model.Pokemon); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pokemon)
		}
	}

	var r1 *pokerrors.RepositoryError
	if rf, ok := ret.Get(1).(func(int) *pokerrors.RepositoryError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pokerrors.RepositoryError)
		}
	}

	return r0, r1
}
