// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/wmaldonadoc/academy-go-q42021/domain/model"
	pokerrors "github.com/wmaldonadoc/academy-go-q42021/pokerrors"
)

// PokemonInteractor is an autogenerated mock type for the PokemonInteractor type
type PokemonInteractor struct {
	mock.Mock
}

// BatchFilter provides a mock function with given fields: disc, items, itemsPerworker
func (_m *PokemonInteractor) BatchFilter(disc string, items int, itemsPerworker int) []*model.Pokemon {
	ret := _m.Called(disc, items, itemsPerworker)

	var r0 []*model.Pokemon
	if rf, ok := ret.Get(0).(func(string, int, int) []*model.Pokemon); ok {
		r0 = rf(disc, items, itemsPerworker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Pokemon)
		}
	}

	return r0
}

// CreateOne provides a mock function with given fields: pokemon
func (_m *PokemonInteractor) CreateOne(pokemon *model.Pokemon) (*model.Pokemon, *pokerrors.UseCaseError) {
	ret := _m.Called(pokemon)

	var r0 *model.Pokemon
	if rf, ok := ret.Get(0).(func(*model.Pokemon) *model.Pokemon); ok {
		r0 = rf(pokemon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pokemon)
		}
	}

	var r1 *pokerrors.UseCaseError
	if rf, ok := ret.Get(1).(func(*model.Pokemon) *pokerrors.UseCaseError); ok {
		r1 = rf(pokemon)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pokerrors.UseCaseError)
		}
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *PokemonInteractor) GetByID(id int) (*model.Pokemon, *pokerrors.UseCaseError) {
	ret := _m.Called(id)

	var r0 *model.Pokemon
	if rf, ok := ret.Get(0).(func(int) *model.Pokemon); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pokemon)
		}
	}

	var r1 *pokerrors.UseCaseError
	if rf, ok := ret.Get(1).(func(int) *pokerrors.UseCaseError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pokerrors.UseCaseError)
		}
	}

	return r0, r1
}

// GetPokemonByName provides a mock function with given fields: name
func (_m *PokemonInteractor) GetPokemonByName(name string) (*model.Pokemon, *pokerrors.UseCaseError) {
	ret := _m.Called(name)

	var r0 *model.Pokemon
	if rf, ok := ret.Get(0).(func(string) *model.Pokemon); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pokemon)
		}
	}

	var r1 *pokerrors.UseCaseError
	if rf, ok := ret.Get(1).(func(string) *pokerrors.UseCaseError); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pokerrors.UseCaseError)
		}
	}

	return r0, r1
}
